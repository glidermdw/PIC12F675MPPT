program _12f675_MPPT;

{ 12F675 MPPT controller

  Copyright (C) 2015 rasberryrabbit

  This source is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free
  Software Foundation; either version 2 of the License, or MPL 1.1
  any later version.

  This code is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  A copy of the GNU General Public License is available on the World Wide Web
  at <http://www.gnu.org/copyleft/gpl.html>. You can also obtain it by writing
  to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
  MA 02111-1307, USA.
}


{$define USE_EEPROM_LM358DIFF}
{.$define USE_LM358_AUTOCAL}

const
   { 4MHz }
   PWM_MAX = 127;            // 75
   PWM_95  = 120;            // PWM_MAX * 0.95
   PWM_LOW = 1;

   TMR1L_LOAD=$17;
   TMR1H_LOAD=$FC;
   
   cLM358_diff = 2;
   Inc_Pwm_Max = 3;

var
   LED1:sbit at GP5_bit;
   PWM_SIG:sbit at GP0_bit;
   PWM_FLAG:bit;
   PWM_TICK, ON_PWM, VOL_PWM:byte;
   TICK_1000:Byte;
   LED1_tm:byte;
   adc_vol, adc_cur, offset_cur, adc_prev, adc_diff : word;
   power_prev, power_curr, power_diff : dword;
   i, LM358_diff:byte;
   flag_inc, got_max :boolean;
   Inc_pwm, eq_cnt : byte;

procedure Interrupt(); iv 0x0004; ics ICS_AUTO;
begin
     if T0IF_bit=1 then begin
       if PWM_FLAG=1 then begin
         ON_PWM:=VOL_PWM;
         // on
         TMR0:=255-ON_PWM;
         PWM_SIG:=0;
         PWM_FLAG:=0;
       end else begin
         // off
         TMR0:=255-PWM_MAX+ON_PWM;
         if ON_PWM<PWM_95 then
            PWM_SIG:=1
            else
              PWM_SIG:=0;
         PWM_FLAG:=1;
       end;
       T0IF_bit:=0;
     end;
end;

begin
     CMCON:=7;
     ANSEL:=%00111100;       // ADC conversion clock = fRC, AN3, AN2;

     TRISIO0_bit:=0;      // PWM
     TRISIO1_bit:=1;      // not Connected
     TRISIO2_bit:=1;      // AN2
     TRISIO4_bit:=1;      // AN3
     TRISIO5_bit:=0;      // LED

     LED1:=0;
     PWM_SIG:=1;
     PWM_FLAG:=1;
     LED1_tm:=250;
     ON_PWM:=0;
     VOL_PWM:=0;
     TICK_1000:=0;
     VCFG_bit:=1;
     CHS1_bit:=1;
     ADFM_bit:=1;

     OPTION_REG:=%01011000;        // ~4KHz @ 4MHz
     TMR0IE_bit:=1;
     
     LM358_diff:=cLM358_diff;
     {$ifdef USE_EEPROM_LM358DIFF}
     LM358_diff:=EEPROM_Read(0);
     {$endif}

     T1CKPS0_bit:=1;               // timer prescaler 1:2
     TMR1CS_bit:=0;
     TMR1L:=TMR1L_LOAD;
     TMR1H:=TMR1H_LOAD;

     adc_vol:=0;
     adc_cur:=0;
     power_prev:=0;
     adc_prev:=0;

     GIE_bit:=1;                   // enable Interrupt

     TMR1ON_bit:=1;

     {$ifdef USE_LM358_AUTOCAL}
     Delay_ms(50);
     LM358_diff:=Adc_Read(2);
     {$endif}

     VOL_PWM:=PWM_LOW;
     flag_inc:=True;
     adc_prev:=0;
     got_max:=False;
     
     while True do begin
       // LED
       if T1IF_bit=1 then begin
         TMR1H:=TMR1H_LOAD;
         TMR1L:=TMR1L_LOAD;
         T1IF_bit:=0;
         Inc(TICK_1000);
         if TICK_1000>=LED1_tm then begin
           LED1:=not LED1;
           TICK_1000:=0;
         end;
       end;
       if (VOL_PWM>=(PWM_MAX-1)) or (VOL_PWM=PWM_LOW) then
         LED1_tm:=64;

       power_prev:=power_curr;
       adc_prev:=adc_cur;
       for i:=0 to 1 do begin
         adc_vol:=adc_vol+ADC_Read(3);
         adc_cur:=adc_cur+ADC_Read(2);
       end;
       adc_vol:=adc_vol div 2;
       adc_cur:=adc_cur div 2;
       
       if adc_cur>LM358_diff then
         adc_cur:=adc_cur-LM358_diff
         else
           adc_cur:=0;
       power_curr:= adc_cur * adc_vol;
       
       if adc_cur>0 then begin
         if power_curr=power_prev then begin
           if adc_cur>adc_prev then begin
             LED1_tm:=32;
           end else
           if adc_cur<adc_prev then begin
             LED1_tm:=32;
           end else begin
             LED1_tm:=240;
             flag_inc:=not flag_inc;
           end;
           if Inc_pwm>1 then
             Dec(Inc_pwm);
         end else begin
           LED1_tm:=120;
           Inc_pwm:=Inc_Pwm_Max;
           if power_curr<power_prev then begin
             if not flag_inc then begin
               flag_inc:=true
             end else begin
               flag_inc:=False;
             end;
           end;
         end;
       end else begin
         flag_inc:=True;
         Inc_pwm:=Inc_Pwm_Max;
         LED1_tm:=64;
       end;

       if flag_inc then begin
         if VOL_PWM<(PWM_MAX-Inc_pwm) then
           VOL_PWM:=VOL_PWM+Inc_pwm
           else
             VOL_PWM:=PWM_MAX;
       end else begin
         if VOL_PWM>(PWM_LOW+(Inc_Pwm_Max+1-Inc_pwm)) then
           VOL_PWM:=VOL_PWM-(Inc_Pwm_Max+1-Inc_pwm)
           else
             VOL_PWM:=PWM_LOW;
       end;
     end;
end.