program _12f675_MPPT;

{ 12F675 MPPT controller

  Copyright (C) 2015 rasberryrabbit

  This source is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free
  Software Foundation; either version 2 of the License, or MPL 1.1
  any later version.

  This code is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  A copy of the GNU General Public License is available on the World Wide Web
  at <http://www.gnu.org/copyleft/gpl.html>. You can also obtain it by writing
  to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
  MA 02111-1307, USA.
}


{$define USE_EEPROM_LM358DIFF}
{.$define USE_LM358_AUTOCAL}

const
   { 4MHz }
   PWM_MAX = 100;
   PWM_LOW = 1;

   TMR1L_LOAD=$17; // 1000000 / 1000, 65535-1000
   TMR1H_LOAD=$fc;
   
   cLM358_diff = 2;
   
var
   LED1:sbit at GP5_bit;
   PWM_SIG:sbit at GP0_bit;
   PWM_FLAG:bit;
   PWM_TICK, ON_PWM, VOL_PWM:byte;
   TICK_1000:Byte;
   LED1_tm:byte;
   adc_vol, adc_cur, offset_cur, adc_prev : word;
   power_prev, power_curr, power_last_equal : dword;
   i,LM358_diff:byte;
   flag_inc :boolean;

procedure Interrupt(); iv 0x0004; ics ICS_AUTO;
begin
     if T0IF_bit=1 then begin
       if PWM_FLAG=1 then begin
         ON_PWM:=VOL_PWM;
         // on
         TMR0:=255-ON_PWM;
         PWM_SIG:=0;
         PWM_FLAG:=0;
       end else begin
         // off
         TMR0:=255-PWM_MAX+ON_PWM;
         PWM_SIG:=1;
         PWM_FLAG:=1;
       end;
       T0IF_bit:=0;
     end else
     if T1IF_bit=1 then begin
       Inc(TICK_1000);
       TMR1L:=TMR1L_LOAD;
       TMR1H:=TMR1H_LOAD;
       if TICK_1000>LED1_Tm then begin
         LED1:=not LED1;
         TICK_1000:=0;
       end;
       T1IF_bit:=0;
     end;
end;

function Adc_Readx(ch:byte):word;
begin
  if ch=2 then
    CHS0_bit:=0
    else
      CHS0_bit:=1;
  GO_NOT_DONE_bit:=1;
  while GO_NOT_DONE_bit=1 do ;
  Hi(Result):=ADRESH;
  Lo(Result):=ADRESL;
end;

begin
     CMCON:=7;
     ANSEL:=%00011100;       // 8/osc, AN3, AN2;

     TRISIO0_bit:=0;      // PWM
     TRISIO1_bit:=1;      // not Connected
     TRISIO2_bit:=1;      // AN2
     TRISIO4_bit:=1;      // AN3
     TRISIO5_bit:=0;      // LED

     LED1:=0;
     PWM_SIG:=1;
     PWM_FLAG:=1;
     LED1_tm:=250;
     ON_PWM:=0;
     VOL_PWM:=0;
     TICK_1000:=0;
     VCFG_bit:=1;
     CHS1_bit:=1;
     ADFM_bit:=1;

     OPTION_REG:=%01010000;        // ~4KHz @ 4MHz
     TMR0IE_bit:=1;
     
     LM358_diff:=cLM358_diff;
     {$ifdef USE_EEPROM_LM358DIFF}
     LM358_diff:=EEPROM_Read(0);
     {$endif}

     PEIE_bit:=1;

     T1CKPS0_bit:=1;               // timer prescaler 1:2
     TMR1CS_bit:=0;
     TMR1IE_bit:=1;
     TMR1L:=TMR1L_LOAD;
     TMR1H:=TMR1H_LOAD;

     adc_vol:=0;
     adc_cur:=0;
     power_prev:=0;
     power_last_equal:=0;
     adc_prev:=0;

     GIE_bit:=1;                   // enable Interrupt

     TMR1ON_bit:=1;

     {$ifdef USE_LM358_AUTOCAL}
     Delay_ms(50);
     LM358_diff:=Adc_Read(2);
     {$endif}

     VOL_PWM:=PWM_LOW;
     flag_inc:=True;

     while True do begin
       while True do begin
         ADON_bit:=1;
         Delay_22us;
         adc_cur:=Adc_Readx(2);
         adc_vol:=Adc_Readx(3);
         ADON_bit:=0;
         if adc_cur>LM358_diff then
           adc_cur:=adc_cur-LM358_diff
           else
             adc_cur:=0;

         power_curr:= adc_cur * adc_vol;
         if power_curr<power_prev then
           flag_inc:=not flag_inc
           else if power_curr=power_prev then begin
             if adc_cur>0 then begin
               if power_curr=power_last_equal then begin
                 flag_inc:=not flag_inc;
                 break;
               end;
               power_last_equal:=power_curr;
             end else begin
                if VOL_PWM=PWM_MAX then
                  break;
                flag_inc:=True;
             end;
           end;

         if flag_inc then begin
           if VOL_PWM<PWM_MAX then
             Inc(VOL_PWM);
         end else begin
           if VOL_PWM>PWM_LOW then
             Dec(VOL_PWM);
         end;
         power_prev:=power_curr;
       end;
       power_prev:=power_curr;
       
       // LED
       if VOL_PWM=PWM_MAX then
         LED1_tm:=128
         else
           if VOL_PWM=PWM_LOW then
             LED1_tm:=64
             else
               LED1_tm:=250;
     end;
end.